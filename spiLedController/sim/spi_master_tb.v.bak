`timescale 1ns/1ps
module spi_master_tb();

    reg clk = 0;
    reg reset = 1;
    reg start = 0;
    reg [7:0] data = 0;
    wire SCLK, MOSI, SS;

    spi_master uut (
        .clk(clk),
        .reset(reset),
        .start(start),
        .data(data),
        .SCLK(SCLK),
        .MOSI(MOSI),
        .SS(SS)
    );

    // Тактовый сигнал 50 MHz
    always #10 clk = ~clk;
    
    // Сбор принятых данных
    reg [7:0] received_data;
    integer bit_count = 0;
    integer error_count = 0;
    integer test_num = 0;
    
    // Ожидаемые значения для проверки
    reg [7:0] expected_data [0:5];
    initial begin
        expected_data[0] = 8'h07; // 00000111
        expected_data[1] = 8'h03; // 00000011
        expected_data[2] = 8'h08; // 00001000
        expected_data[3] = 8'hAA; // 10101010
        expected_data[4] = 8'h55; // 01010101
        expected_data[5] = 8'hFF; // 11111111
    end
    
    initial begin
        $dumpfile("spi_master.vcd");
        $dumpvars(0, spi_master_tb);
        
        // Мониторинг
        $display("\nStarting SPI Master Testbench");
        
        // 1. Инициализация и сброс
        reset = 1;
        #100 reset = 0;
        #100;
        
        // 2. Запуск тестов
        run_test(8'h07);
        run_test(8'h03);
        run_test(8'h08);
        run_test(8'hAA);
        run_test(8'h55);
        run_test(8'hFF);
        
        // 3. Завершение
        if (error_count == 0)
            $display("\nAll tests PASSED!");
        else
            $display("\nTests completed with %0d errors", error_count);
        
        #100 $finish;
    end
    
    // Задача для запуска теста
    task run_test;
        input [7:0] tx_data;
        begin
            $display("\nTest %0d: Sending 0x%h (%b)", test_num, tx_data, tx_data);
            data = tx_data;
            start = 1;
            #20 start = 0;
            wait(SS == 1); // Ждём завершения передачи
            
            // Проверка результата
            if (received_data !== expected_data[test_num]) begin
                $display("ERROR: Expected 0x%h (%b), Received 0x%h (%b)",
                      expected_data[test_num], expected_data[test_num],
                      received_data, received_data);
                error_count = error_count + 1;
            end
            else begin
                $display("PASS: Data matched");
            end
            
            test_num = test_num + 1;
            #100; // Пауза между передачами
        end
    endtask
    
    // Сбор данных на спаде SCLK (SPI Mode 0)
    always @(negedge SCLK) begin
        if (!SS) begin
            received_data[7-bit_count] = MOSI;
            bit_count = bit_count + 1;
            
            if (bit_count == 8) begin
                $display("Received: 0x%h (%b)", received_data, received_data);
                bit_count = 0;
            end
        end
        else begin
            bit_count = 0; // Сброс при неактивном SS
        end
    end
endmodule